// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package registry

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ServiceRegistryClient is the client API for ServiceRegistry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceRegistryClient interface {
	// Registers a service
	Register(ctx context.Context, in *ServiceInfo, opts ...grpc.CallOption) (*RegistrationResult, error)
	// unregisters a service
	UnRegister(ctx context.Context, in *ServiceInfo, opts ...grpc.CallOption) (*RegistrationResult, error)
}

type serviceRegistryClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceRegistryClient(cc grpc.ClientConnInterface) ServiceRegistryClient {
	return &serviceRegistryClient{cc}
}

var serviceRegistryRegisterStreamDesc = &grpc.StreamDesc{
	StreamName: "Register",
}

func (c *serviceRegistryClient) Register(ctx context.Context, in *ServiceInfo, opts ...grpc.CallOption) (*RegistrationResult, error) {
	out := new(RegistrationResult)
	err := c.cc.Invoke(ctx, "/registry.ServiceRegistry/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var serviceRegistryUnRegisterStreamDesc = &grpc.StreamDesc{
	StreamName: "UnRegister",
}

func (c *serviceRegistryClient) UnRegister(ctx context.Context, in *ServiceInfo, opts ...grpc.CallOption) (*RegistrationResult, error) {
	out := new(RegistrationResult)
	err := c.cc.Invoke(ctx, "/registry.ServiceRegistry/UnRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceRegistryService is the service API for ServiceRegistry service.
// Fields should be assigned to their respective handler implementations only before
// RegisterServiceRegistryService is called.  Any unassigned fields will result in the
// handler for that method returning an Unimplemented error.
type ServiceRegistryService struct {
	// Registers a service
	Register func(context.Context, *ServiceInfo) (*RegistrationResult, error)
	// unregisters a service
	UnRegister func(context.Context, *ServiceInfo) (*RegistrationResult, error)
}

func (s *ServiceRegistryService) register(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/registry.ServiceRegistry/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Register(ctx, req.(*ServiceInfo))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *ServiceRegistryService) unRegister(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.UnRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/registry.ServiceRegistry/UnRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.UnRegister(ctx, req.(*ServiceInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// RegisterServiceRegistryService registers a service implementation with a gRPC server.
func RegisterServiceRegistryService(s grpc.ServiceRegistrar, srv *ServiceRegistryService) {
	srvCopy := *srv
	if srvCopy.Register == nil {
		srvCopy.Register = func(context.Context, *ServiceInfo) (*RegistrationResult, error) {
			return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
		}
	}
	if srvCopy.UnRegister == nil {
		srvCopy.UnRegister = func(context.Context, *ServiceInfo) (*RegistrationResult, error) {
			return nil, status.Errorf(codes.Unimplemented, "method UnRegister not implemented")
		}
	}
	sd := grpc.ServiceDesc{
		ServiceName: "registry.ServiceRegistry",
		Methods: []grpc.MethodDesc{
			{
				MethodName: "Register",
				Handler:    srvCopy.register,
			},
			{
				MethodName: "UnRegister",
				Handler:    srvCopy.unRegister,
			},
		},
		Streams:  []grpc.StreamDesc{},
		Metadata: "api/registry/registry.proto",
	}

	s.RegisterService(&sd, nil)
}

// NewServiceRegistryService creates a new ServiceRegistryService containing the
// implemented methods of the ServiceRegistry service in s.  Any unimplemented
// methods will result in the gRPC server returning an UNIMPLEMENTED status to the client.
// This includes situations where the method handler is misspelled or has the wrong
// signature.  For this reason, this function should be used with great care and
// is not recommended to be used by most users.
func NewServiceRegistryService(s interface{}) *ServiceRegistryService {
	ns := &ServiceRegistryService{}
	if h, ok := s.(interface {
		Register(context.Context, *ServiceInfo) (*RegistrationResult, error)
	}); ok {
		ns.Register = h.Register
	}
	if h, ok := s.(interface {
		UnRegister(context.Context, *ServiceInfo) (*RegistrationResult, error)
	}); ok {
		ns.UnRegister = h.UnRegister
	}
	return ns
}

// UnstableServiceRegistryService is the service API for ServiceRegistry service.
// New methods may be added to this interface if they are added to the service
// definition, which is not a backward-compatible change.  For this reason,
// use of this type is not recommended.
type UnstableServiceRegistryService interface {
	// Registers a service
	Register(context.Context, *ServiceInfo) (*RegistrationResult, error)
	// unregisters a service
	UnRegister(context.Context, *ServiceInfo) (*RegistrationResult, error)
}
